- We use firebase because it does a lot of API integration automatically, else in other databases we will have to make separate APIs for login, authentications etc separately

- Firestore is used because...?

- flutter pub add firebase_core
flutter pub add firebase_auth
flutter pub add cloud_firestore
flutter pub add provider
flutter pub add firebase_ui_auth // Do not install this one yet

- npm install -g firebase-tools
firebase login
firebase projects:list
dart pub global activate flutterfire_cli

- env -> Envirpnmental Variables -> Path -> New -> <Jo bhi path diya hua hai> -> Add -> OK -> OK

- Close terminal, then reopen it

- flutterfire configure
Select project -> android

- import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:provider/provider.dart';

- Firebase.initialize() method is a Future so we use async and await keywords in main.dart's void main() function so firebase is initialized before app runs and app doesn't crash.

Okay, what do we have to do, Ash:
- QWorld Quix (Nov 13)
- HCI (Nov 30)
- App Dev (Themes/Sign In/Authentication)
- SI (Assignment aaanay wala hai for sure)
- Is there anything else? Stormfiber paid
- DBMS checking I need to do this...
- LinkedIn
- LeetCode 150 (I CAN do this)
- FYP madness... Milestones 2 and 3

Firebase Social Login
Then Refactor Whole Code and put it into Provider

https://petercoding.com/firebase/2021/05/24/using-google-sign-in-with-firebase-in-flutter/


- Do Riverpod first to do BLOC easily later
- Riverpod used because it requires less code

State Management:
- state (condition) and event (action)
- click, tap, swipe
- hover event does not work on phone; it works on web
- River and flutter_riverpod used for state management
- Factory is a design pattern method; use it when same functions need to be defined different ways.
- States for hitting API: success, network error, loading


Good code in flutter:
- Two parts: API and UI, and there should be layer in between
- Business logic NOT on UI
- Server/API (type SOAP, Json) ----> Network Layer (has JSON data) ----> Middle Layer/Notifier/BLOC (structures data for UI; has data in Dart) ----> UI (Channel like mobile, desktop etc)
- If middle layer was not there, you would have to make UI each time again when data changes
- Best practice: make separate model for Netwrok and Middle layers so you only need to make changes in one
- Middle Layer can be anything: MVC, MVVM, BLOC, Riverpod
- Dependency injections: when app runs, it gets to know where data is coming from.
- UI tells Notifier it is on some state (loading, initial, succes, error) and then it renders that state on UI.
- Notifier is global so it can notify for whatever state it wants.
